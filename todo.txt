FRONTEND FEATURES

* Integrate the frontend. One view for everything. Play with rendering for current spoofed db. Use flask_table.
* Default to current week, dropdown for previous.
* Main page should colorize for in-progress games. It should also add the asterisk back to home team.
* Add leaderboard page and hyperlink it from the main view.
* There is python in render_lines_with_scores which compares and renders the scores/picks,
  coloring them green etc. Convert that to javascript.

PICK FORM

* Get the jinja form to extend the main layout template properly. Make it work with picks.
* Account login and authentication. Probably basic flask auth in the session.
  http://exploreflask.com/en/latest/users.html
  http://exploreflask.com/en/latest/views.html

MEDIUM TERM

* Figure out how it flushes week to week. Probably will have a separate route for each week, so
  people can reference back. This flush will also call fetch_lines, and will swap over once they're
  available. This can probably be manual for now, done by me on wed nights.
* Database backup scheme.
* tox lint and flake8, no pytest yet.
* Use flask-bcrypt http://exploreflask.com/en/latest/configuration.html
* Use flask-cache if the app is slow: http://exploreflask.com/en/latest/views.html
* Use flask-assets to bundle jsmin and jquerymin and stuff http://exploreflask.com/en/latest/static.html
* Use alembic for migrations http://exploreflask.com/en/latest/storing.html. Read all alembic docs.
* Make custom validators for stuff like "is this value unique"
  http://exploreflask.com/en/latest/forms.html#custom-validators
* Use blueprints http://exploreflask.com/en/latest/blueprints.html
* Add pretty readme.

LONG TERM

* Port to a mobile app.
* Port to python 3.
* Add tests.
