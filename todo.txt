AFTER RELEASE FOLLOWUPS

* Port to a mobile app.
* Add cross checking and voting against multiple sources, becoming robust against external api
  change.
* Client key creation and verification.
* Add a random question at the end.
* Set up packaging.
* Add tests.

REQUIRED FEATURES

* Commit to my personal github. Track in VCS.
* Full verification of the backend. Get matchup.py ready (Using test.py as necessary).
  Enter some records for users, picks, lines, scores, and calculate point results.
* Integrate the frontend. One view for everything. Default to current week, dropdown for previous.
* Add leaderboard page and hyperlink it from the main view.
* Add a makefile with targets for creating the db, starting the app (those are different), etc.
* app.py will contain all the controller logic. It will connect to an already-existing db, always.
* The app should contact westgate on wednesday (or whenever they usually post), and then
  retry every hour until they lines are up.
* Scores should be fetched upon refresh (don't need to implement timer).
* Look up basic flask auth, add user knowledge to the session.
* There is python in render_lines_with_scores which compares and renders the scores/picks,
  coloring them green etc. Convert that to javascript.
* Disable the pick for a team if the game has started. You might have to add some functionality
  to the fifo behavior to handle the cases where they've already picked a view and they're still
  picking.

FINAL RELEASE STUFF

* Hosting the service publicly.
* Make sure 49ers works for everything, it's weird because it starts with a number.
* tox lint and flake8, no pytest yet.
