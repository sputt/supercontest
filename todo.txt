NOW

* Account login and authentication. Probably basic flask auth in the session.
  http://exploreflask.com/en/latest/users.html
  http://exploreflask.com/en/latest/views.html
* Once they can login, they can click inside matchups to select. 5 max. You have to unclick
  one to click another.
* Set a cutoff time. Show it on the frontend.
* Email the person after the picks are cutoff.
* Delete all the other flask login and pick form stuff that was already in the app.

LATER

* Statistical analyses. Underdog vs favorite. Wins by team.
* Move the routes out of app.py and into a views.py module.
* Rewrite the jinja logic in javascript? Yes.
* Cron jobs for fetch_lines (currently manual) and fetch_scores (currently on refresh).
  The latter must be cached as the app scales.
* Add text field on frontend somewherewhich says "what would make this app better?" and types "petty's mom"
  over and over no matter what keystrokes you enter.
* Add checkbox somewhere which says "I am playing this week under protest."
* Add leaderboard page and hyperlink it from the main view.
* Database backup scheme.
* tox lint and flake8, no pytest yet.
* Use flask-bcrypt http://exploreflask.com/en/latest/configuration.html
* Use flask-cache if the app is slow: http://exploreflask.com/en/latest/views.html
* Use flask-assets to bundle jsmin and jquerymin and stuff http://exploreflask.com/en/latest/static.html
* Use alembic for migrations http://exploreflask.com/en/latest/storing.html. Read all alembic docs.
* Make custom validators for stuff like "is this value unique"
  http://exploreflask.com/en/latest/forms.html#custom-validators
* Use blueprints http://exploreflask.com/en/latest/blueprints.html
* Add pretty readme.
* Port to a mobile app.
* Port to python 3.
* Add tests.
* Add a chat client.
